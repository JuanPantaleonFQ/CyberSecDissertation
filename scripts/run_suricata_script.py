import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

''' The script utilizes Suricata's eve.json logs to extract alert data,
    merges them into a single DataFrame, and generates visualizations
    for analysis. It also saves the results to CSV and image files

    The eve.json files have been generated by running Suricata command one by 
    one in each subfolder of the base directory. Therefore generating each one
    the suricata_logs in the subfolder output_pcap1, output_pcap2, etc.

    Note: The name of the subfolders output_pcap1, output_pcap2, etc.. dont match
    the names of the pcapc files in the UNSW-NB15 dataset.

    The actual pcap files used for the analysis were ignored in the
    in the gitignore file due to their size.
    
    Pcapcs files used referenced as the UNSW-NB15 dataset:
    https://www.unsw.adfa.edu.au/unsw-canberra-cyber/cybersecurity/unsw-nb15-dataset/
    1.pcap
    10.pcap
    11.pcap
    12.pcap
    13.pcap
    14.pcap
    15.pcap
    16.pcap
    17.pcap
    18.pcap
    27.pcap
'''

# Define output directories
output_dir = Path("output/suricata_analysis")
output_dir.mkdir(parents=True, exist_ok=True)

base_dir = Path("output/suricata_logs")
all_alerts = []

# === READ AND EXTRACT ALERTS ===

# Loop through each eve.json file
for subfolder in base_dir.glob("output_pcap*/eve.json"):
    pcap_name = subfolder.parent.name
    with open(subfolder, 'r') as f:
        for line in f:
            entry = json.loads(line)
            if entry.get("event_type") == "alert":
                all_alerts.append({
                    "pcap": pcap_name,
                    "timestamp": entry.get("timestamp"),
                    "src_ip": entry.get("src_ip"),
                    "src_port": entry.get("src_port"),
                    "dest_ip": entry.get("dest_ip"),
                    "dest_port": entry.get("dest_port"),
                    "proto": entry.get("proto"),
                    "alert_signature": entry["alert"]["signature"],
                    "alert_category": entry["alert"]["category"],
                    "alert_severity": entry["alert"]["severity"]
                })

# Convert to DataFrame
merged_alerts_df = pd.DataFrame(all_alerts)

# Save to CSV
csv_output_path = output_dir / "merged_suricata_alerts.csv"
merged_alerts_df.to_csv(csv_output_path, index=False)

# Check if any alerts were found
if not merged_alerts_df.empty and "pcap" in merged_alerts_df.columns:
    # Plot: Alerts per PCAP
    plt.figure(figsize=(10, 5))
    sns.countplot(data=merged_alerts_df, y="pcap", order=merged_alerts_df["pcap"].value_counts().index, palette="Blues_d")
    plt.title("Number of Alerts per PCAP")
    plt.xlabel("Alert Count")
    plt.ylabel("PCAP File")
    plt.tight_layout()
    plt.savefig(output_dir / "alerts_per_pcap.png")
    plt.close()

    # Plot: Top 10 Alert Categories
    top_categories = merged_alerts_df["alert_category"].value_counts().head(10)
    plt.figure(figsize=(10, 5))
    sns.barplot(x=top_categories.values, y=top_categories.index, palette="viridis")
    plt.title("Top 10 Alert Categories")
    plt.xlabel("Alert Count")
    plt.ylabel("Alert Category")
    plt.tight_layout()
    plt.savefig(output_dir / "top_alert_categories.png")
    plt.close()

    # Plot: Top 10 Alert Signatures
    top_signatures = merged_alerts_df["alert_signature"].value_counts().head(10)
    plt.figure(figsize=(10, 6))
    sns.barplot(x=top_signatures.values, y=top_signatures.index, palette="magma")
    plt.title("Top 10 Alert Signatures")
    plt.xlabel("Alert Count")
    plt.ylabel("Alert Signature")
    plt.tight_layout()
    plt.savefig(output_dir / "top_alert_signatures.png")
    plt.close()

    # Summary
    print(f"‚úÖ Merged {len(merged_alerts_df)} alerts from {merged_alerts_df['pcap'].nunique()} PCAP files.")
    print(f"üìÑ CSV saved to: {csv_output_path}")
    print(f"üìä Charts saved in folder: {output_dir}")
else:
    print("‚ö†Ô∏è No alerts found or missing 'pcap' column in alert data.")
    print(f"üõë Check if your eve.json files contain alert entries.")
